#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

stage=0
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/tedlium3
#      You can find data, doc, legacy, LM, etc, inside it.
#      You can download them from https://www.openslr.org/51
#
#  - $dl_dir/musan
#      This directory contains the following directories downloaded from
#       http://www.openslr.org/17/
#
#     - music
#     - noise
#     - speech
dl_dir=$PWD/download

. shared/parse_options.sh || exit 1
cmd="queue-freegpu.pl --config conf/gpu.conf --gpu 1 --mem 4G"

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  500
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # If you have pre-downloaded it to /path/to/tedlium3,
  # you can create a symlink
  #
  # ln -sfv /path/to/tedlium3 $dl_dir/tedlium3
  #
  if [ ! -d $dl_dir/tedlium3 ]; then
    lhotse download tedlium $dl_dir
    mv $dl_dir/TEDLIUM_release-3 $dl_dir/tedlium3
  fi

  # Download big and small 4 gram lanuage models
  if [ ! -d $dl_dir/lm ]; then
    wget --continue http://kaldi-asr.org/models/5/4gram_small.arpa.gz -P $dl_dir/lm
    wget --continue http://kaldi-asr.org/models/5/4gram_big.arpa.gz -P $dl_dir/lm
    gzip -d $dl_dir/lm/4gram_small.arpa.gz $dl_dir/lm/4gram_big.arpa.gz
  fi

  # If you have pre-downloaded it to /path/to/musan,
  # you can create a symlink
  #
  #ln -sfv /path/to/musan $dl_dir/musan

  if [ ! -d $dl_dir/musan ]; then
    lhotse download musan $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare tedlium3 manifests"
  if [ ! -f data/manifests/.tedlium3.done ]; then
    # We assume that you have downloaded the tedlium3 corpus
    # to $dl_dir/tedlium3
    mkdir -p data/manifests
    lhotse prepare tedlium --normalize-text kaldi -j 4 $dl_dir/tedlium3 data/manifests

    for part in train dev test; do
      lhotse supervision with-alignment-from-ctm --verbose \
        --ctm-file download/tedlium_ctm/${part}.ctm \
        data/manifests/tedlium_supervisions_${part}.jsonl.gz \
        data/manifests/tedlium_supervisions_${part}_new.jsonl.gz
      mv data/manifests/tedlium_supervisions_${part}_new.jsonl.gz data/manifests/tedlium_supervisions_${part}.jsonl.gz
    done
    touch data/manifests/.tedlium3.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Prepare musan manifests"
  # We assume that you have downloaded the musan corpus
  # to data/musan
  if [ ! -e data/manifests/.musan.done ]; then
    mkdir -p data/manifests
    lhotse prepare musan $dl_dir/musan data/manifests
    touch data/manifests/.musan.done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Compute fbank for tedlium3"

  if [ ! -e data/fbank/.tedlium3.done ]; then
    mkdir -p data/fbank

    $cmd exp/feats.log python local/compute_fbank_tedlium.py

    gunzip -c data/manifests/cuts_train.jsonl.gz | shuf | gzip -c > data/manifests/cuts_train_shuf.jsonl.gz
    mv data/manifests/cuts_train_shuf.jsonl.gz data/manifests/cuts_train.jsonl.gz

    touch data/fbank/.tedlium3.done
  fi
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Compute fbank for musan"
  if [ ! -e data/fbank/.musan.done ]; then
    mkdir -p data/fbank
    python3 ./local/compute_fbank_musan.py
    touch data/fbank/.musan.done
  fi
fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 5: Prepare BPE train data and set of words"
  lang_dir=data/lang_bpe_500
  mkdir -p $lang_dir

  # For words.txt, we use all the words provided in the official dictionary, but also
  # all the words in the transcripts. This is because the official dictionary is
  # incomplete and does not contain all the words in the transcripts.

  # Remove pronunciation variant markers
  awk '{print $1}' $dl_dir/tedlium3/TEDLIUM.152k.dic |
  sed 's:([0-9])::g' | sort | uniq > $lang_dir/words_orig.txt

  # Add words from transcripts. Here are the steps:
  # 1. Extract the transcripts from the manifest
  # 2. Remove the quotes
  # 3. Split into words
  # 4. Sort and remove duplicates
  cat <(gunzip -c data/manifests/tedlium_supervisions_train.jsonl.gz |\
        jq '.text' |\
        sed 's:"::g' |\
        grep -o -E '\w+' |\
        sort -u )> $lang_dir/words_transcript.txt

  # Add special words to words.txt
  echo "<eps> 0" > $lang_dir/words.txt
  echo "!SIL 1" >> $lang_dir/words.txt
  echo "<UNK> 2" >> $lang_dir/words.txt

  # Combine the two sets of words
  cat $lang_dir/words_orig.txt $lang_dir/words_transcript.txt |\
    sort -u | awk '{print $0,NR+2}'>> $lang_dir/words.txt

  # Add remaining special word symbols expected by LM scripts.
  num_words=$(cat $lang_dir/words.txt | wc -l)
  echo "<s> ${num_words}" >> $lang_dir/words.txt
  num_words=$(cat $lang_dir/words.txt | wc -l)
  echo "</s> ${num_words}" >> $lang_dir/words.txt
  num_words=$(cat $lang_dir/words.txt | wc -l)
  echo "#0 ${num_words}" >> $lang_dir/words.txt
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "Stage 6: Prepare BPE based lang"
  lang_dir=data/lang_bpe_500

  gunzip -c $dl_dir/tedlium3/LM/*.en.gz | sed 's: <\/s>::g' > $lang_dir/train_orig.txt
  ./local/prepare_transcripts.py \
    --input-text-path $lang_dir/train_orig.txt \
    --output-text-path $lang_dir/train.txt
  
  # gunzip -c data/manifests/tedlium_supervisions_train.jsonl.gz |\
  #   jq '.text' |\
  #   sed 's:"::g' >> $lang_dir/train.txt

  # python local/train_bpe_model.py \
  #   --lang-dir $lang_dir \
  #   --vocab-size 500 \
  #   --transcript $lang_dir/train.txt

  if [ ! -f $lang_dir/L_disambig.pt ]; then
    python local/prepare_lang_bpe.py --lang-dir $lang_dir --oov "<UNK>"
  fi
fi

if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: Prepare G"
  # We assume you have install kaldilm, if not, please install
  # it using: pip install kaldilm
  lang_dir=data/lang_bpe_500

  mkdir -p data/lm
  if [ ! -f ${lang_dir}/3gram.arpa ]; then
    ./shared/make_kn_lm.py \
      -ngram-order 3 \
      -text $lang_dir/train.txt \
      -lm $lang_dir/3gram.arpa
  fi

  if [ ! -f ${lang_dir}/3gram.fst.txt ]; then
    python3 -m kaldilm \
      --read-symbol-table="$lang_dir/words.txt" \
      --disambig-symbol='#0' \
      --max-order=3 \
      $lang_dir/3gram.arpa > $lang_dir/3gram.fst.txt
  fi
fi

if [ $stage -le 8 ] && [ $stop_stage -ge 8 ]; then
  log "Stage 8: Compile HLG"

  lang_dir=data/lang_bpe_500
  cp $lang_dir/3gram.fst.txt data/lm/G_3_gram.fst.txt

  if [ ! -f $lang_dir/HLG.pt ]; then
    ./local/compile_hlg.py \
      --lang-dir $lang_dir \
      --lm G_3_gram
  fi
fi

if [ $stage -le 9 ] && [ $stop_stage -ge 9 ]; then
  log "Stage 9: Compile LG"

  lang_dir=data/lang_bpe_500
  python local/compile_lg.py --lang-dir $lang_dir --lm G_3_gram
fi

if [ $stage -le 10 ] && [ $stop_stage -ge 10 ]; then
  log "Stage 10: Prepare bigram token-level P for MTER training"

  lang_dir=data/lang_bpe_500

  if [ ! -f $lang_dir/transcript_tokens.txt ]; then
    ./local/convert_transcript_words_to_tokens.py \
      --lexicon $lang_dir/lexicon.txt \
      --transcript $lang_dir/train.txt \
      --oov "<UNK>" \
      > $lang_dir/transcript_tokens.txt
  fi

  if [ ! -f $lang_dir/P.arpa ]; then
    ./shared/make_kn_lm.py \
      -ngram-order 2 \
      -text $lang_dir/transcript_tokens.txt \
      -lm $lang_dir/P.arpa
  fi

  if [ ! -f $lang_dir/P.fst.txt ]; then
    python3 -m kaldilm \
      --read-symbol-table="$lang_dir/tokens.txt" \
      --disambig-symbol='#0' \
      --max-order=2 \
      $lang_dir/P.arpa > $lang_dir/P.fst.txt
  fi
fi